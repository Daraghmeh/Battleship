{"name":"Battleship ~ Mohammad Daraghmeh (Java)","tagline":"Welcome, this is a two week Java based project with the purpose of creating a Graphical User Interface (GUI) for the single player game of classical battleship","body":"# Overview of Battleship\r\nThis is a simplified single player version of the popular board game, Battleship. Battleship is in two words is a guessing game. Even though it is a game of simple rules (fire/miss) it was surprisingly a great learning experience. In a nutshell, the object of the game is to sink all of the ships on the board.\r\n\r\n## Depth-In view of Battleship\r\nAs mentioned the objective of Battleship is to sink all of the ships on the board. With each click (turn), a player is given a grid and has to decided where to fire on the grid. The result of this decision can either be that the spot fired on was a hit or miss. A hit being that part of a ship on the grid was hit or a miss being that water was at that spot. The standard setup of the game is for one player with unlimited turns and ammunition. When all ships on the board are sunk then the game is over and the player has won.\r\n\r\n## Language/Program Used\r\nThis project was written in Java using the Eclipse platform of course from stretch. What was to be learned from creating this project was the following:\r\n\r\n* To apply the Model-View-Control (MVC) design pattern to a specific application.\r\n\r\n_Note on MVC_ : I believe MVC is the perfect harmony between the user interface and the model. For in this project my GUI and Model were differently separated yet worked hand in hand to accomplish a fully functional battleship game. However, it does not stop there for the same method of MVC is applied in the world of engineering in form of Model,User Interface, and Controller. Luckily for me I learned MVC in two courses at the same time (Object-Oriented Design and Digital System Design 2).\r\n\r\n* Greater knowledge of object-oriented design and inheritance/interface design skills.\r\n* Gain experience using Java's \"Swing\" GUI classes\r\n* Gain experience with event driven programming\r\n\r\n## Project Design Approach\r\nA separation of the model (game functionality) from the view and controller (GUI) as much as possible following the design pattern of MVC. When exploring my source code you will be able to see this clear separation (BattleShipGUI/BattleShipModel).\r\n\r\n![Line Break](https://f.cloud.github.com/assets/4383833/966407/93111010-0547-11e3-9b7c-79c3108cddb0.png)\r\n\r\n### Game Setup/Rules\r\n~ One board with \"X\" of squares. Ex: (4 by 4)\r\n\r\n~ At least one ship on the board.\r\n\r\n### **Ship Rules**  ### Program performs a check for all rules below.\r\n\r\n~ All orientation of the ships must be either horizontal or vertical (no diagonals). \r\n\r\n~ Ship locations must be completely within the boundaries of the specified board.\r\n\r\n~ No ships can overlap.\r\n\r\n### **Input File Format**\r\n\r\n~ File must be in the format of a text file.\r\n\r\n### Breakdown of Format\r\n\r\n![Input Format](https://f.cloud.github.com/assets/4383833/966146/16cd6980-053e-11e3-8dac-49fd7cf50be2.jpg)\r\n\r\nThis example is a 6x6 board with the first ship a 2-section horizontal ship in the second row starting in the second position from the left. The second ship a 6-section ship that completely occupies the rightmost column of the board.\r\n\r\n### **End Game**\r\n\r\nPlayer has successfully sunk all ships on the board and GUI has produced the message \"XXX\" (Fig. 7)\r\n\r\n### **Time of Game**\r\n\r\nFrom 1 to 5 minutes.\r\n\r\n![Line Break](https://f.cloud.github.com/assets/4383833/966407/93111010-0547-11e3-9b7c-79c3108cddb0.png)\r\n\r\nEnd Me","google":"UA-40773425-3","note":"Don't delete this file! It's used internally to help with page regeneration."}